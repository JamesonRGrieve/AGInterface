name: Build, Publish, and Test

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  npm-build:
    runs-on: ubuntu-latest
    name: NPM Build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 20

      - name: Install dependencies and build
        run: npm install && npm run build

  docker-build:
    needs: npm-build
    runs-on: ubuntu-latest
    name: Docker Build
    permissions:
      packages: write
      contents: read
    outputs:
      digest: ${{ steps.docker_build.outputs.digest }}
      image-names: ${{ steps.set_image_names.outputs.image-names }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Generate image names
        id: set_image_names
        run: |
          echo "image-names=ghcr.io/${{ github.repository_owner }}/AGiXT-Interactive,${{ github.repository_owner }}/AGiXT-Interactive" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ steps.set_image_names.outputs.image-names }}
          tags: |
            type=raw,value={{branch}}
            type=semver,pattern={{raw}},enable=${{ github.ref_type == 'tag' }}
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' }}
            type=sha
          sep-tags: ','

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1

  publish-matrix:
    needs: docker-build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry: [github, dockerhub]
        include:
          - registry: github
            enabled: true
          - registry: dockerhub
            enabled: ${{ startsWith(github.ref, 'refs/tags/v') }}
    name: Publish to ${{ matrix.registry }}
    permissions:
      packages: write
      contents: read

    steps:
      - name: Skip if not enabled
        if: matrix.registry == 'dockerhub' && matrix.enabled != true
        run: |
          echo "DockerHub publishing is only enabled for release tags"
          exit 0

      - name: Checkout repository
        if: matrix.enabled
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Download Docker image
        if: matrix.enabled
        uses: actions/download-artifact@v4.1.4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        if: matrix.enabled
        run: |
          docker load --input /tmp/image.tar

      - name: Log in to GitHub Container Registry
        if: matrix.registry == 'github' && matrix.enabled
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: matrix.registry == 'dockerhub' && matrix.enabled
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image repository
        if: matrix.enabled
        id: extract_repo
        run: |
          if [ "${{ matrix.registry }}" == "github" ]; then
            echo "repo=ghcr.io/${{ github.repository_owner }}/AGiXT-Interactive" >> $GITHUB_OUTPUT
          else
            echo "repo=${{ github.repository_owner }}/AGiXT-Interactive" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata for Docker
        if: matrix.enabled
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ steps.extract_repo.outputs.repo }}
          tags: |
            ${{ matrix.registry == 'github' && github.ref_type != 'tag' && format('type=raw,value={0}', github.ref_name) || '' }}
            ${{ github.ref_type == 'tag' && 'type=semver,pattern={{raw}}' || '' }}
            ${{ github.ref_type == 'tag' && 'type=raw,value=latest' || '' }}
            ${{ matrix.registry == 'github' && 'type=sha' || '' }}
          sep-tags: ','

      - name: Push Docker image
        if: matrix.enabled
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64/v8

      - name: Update DockerHub README
        if: matrix.registry == 'dockerhub' && matrix.enabled
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ github.repository_owner }}/AGiXT-Interactive
          readme-filepath: ./docs/README.md

  test-ui:
    needs: [docker-build, publish-matrix]
    if: always() && needs.docker-build.result == 'success'
    runs-on: ubuntu-latest
    name: Test UI
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip3 install jupyter nbconvert[webpdf] pyotp requests qrcode==7.4.2 opencv-python-headless numpy pyzbar openai agixtsdk xts gtts tqdm soundfile playwright playwright_stealth
          playwright install-deps && playwright install

      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --fix-missing -y pandoc texlive-xetex texlive-fonts-recommended texlive-plain-generic curl ffmpeg

      - name: Start AGiXT service
        run: |
          docker run -d --name agixt \
            -p 7437:7437 \
            -e DATABASE_TYPE=sqlite \
            -e DATABASE_NAME=agixt \
            -e AGIXT_API_KEY=just-a-test \
            -e AGIXT_URI=http://agixt:7437 \
            -e APP_URI=http://localhost:3437 \
            -e AGENT_NAME=XT \
            -e WORKING_DIRECTORY=/agixt/WORKSPACE \
            -e TOKENIZERS_PARALLELISM=false \
            -e UVICORN_WORKERS=10 \
            -e LOG_LEVEL=INFO \
            -e TZ=America/New_York \
            -e SEED_DATA=true \
            -e EZLOCALAI_URI=https://api.ezlocal.ai/v1/ \
            -e EZLOCALAI_API_KEY=n0ne \
            -e EZLOCALAI_MAX_TOKENS=32000 \
            -e EZLOCALAI_VOICE=HAL9000 \
            ghcr.io/josh-xt/agixt:main

      - name: Start frontend service
        run: |
          docker run -d --name frontend \
            -p 3437:3437 \
            -e mode=production \
            -e NEXT_TELEMETRY_DISABLED=1 \
            -e AGIXT_AGENT=XT \
            -e AGIXT_FOOTER_MESSAGE='AGiXT 2024' \
            -e APP_DESCRIPTION='XT is an advanced artificial intelligence agent orchestration agent.' \
            -e APP_NAME=XT \
            -e AGIXT_FILE_UPLOAD_ENABLED=true \
            -e AGIXT_VOICE_INPUT_ENABLED=true \
            -e AGIXT_RLHF=true \
            -e AGIXT_ALLOW_MESSAGE_EDITING=true \
            -e AGIXT_ALLOW_MESSAGE_DELETION=true \
            -e AGIXT_SHOW_OVERRIDE_SWITCHES=tts,websearch,analyze-user-input \
            -e INTERACTIVE_MODE=chat \
            -e ALLOW_EMAIL_SIGN_IN=true \
            -e APP_URI=http://localhost:3437 \
            -e AGIXT_SERVER=http://localhost:7437 \
            -e LOG_VERBOSITY_SERVER=3 \
            -e TZ=America/New_York \
            ghcr.io/${{ github.repository_owner }}/AGiXT-Interactive:${{ github.ref_name }}

      - name: Wait for services to be ready
        run: |
          echo "Waiting for AGiXT to be ready..."
          timeout 300 bash -c 'until curl -s http://localhost:7437; do sleep 5; done'

          echo "Waiting for frontend to be ready..."
          timeout 300 bash -c 'until curl -s http://localhost:3437; do sleep 5; done'

      - name: Execute notebook test
        id: execute_notebook
        env:
          API_KEY: ${{ secrets.api-key }}
          EZLOCALAI_URI: ${{ secrets.EZLOCALAI_URI }}
          EZLOCALAI_API_KEY: ${{ secrets.EZLOCALAI_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          echo "Executing notebook with strict error checking..."
          python3 -m nbconvert --execute --log-level INFO --to pdf tests/FrontEnd.ipynb
          STRICT_STATUS=$?
          echo "strict_status=${STRICT_STATUS}" >> $GITHUB_ENV

      - name: Rerun allowing errors if strict status is not 0
        if: env.strict_status != '0'
        run: |
          echo "Executing notebook with error tolerance..."
          python3 -m nbconvert --execute --allow-errors --log-level INFO --to pdf tests/FrontEnd.ipynb

      - name: Send Report to Discord
        env:
          HAS_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK != '' }}
        if: always() && env.HAS_WEBHOOK == 'true'
        run: |
          # Set message based on stored test outcome
          BRANCH_NAME=${{ github.ref_name }}

          if [ "${{ github.actor }}" == "Josh-XT" ]; then
            DISCORD_NAME="<@381837595522367488>"
          elif [ "${{ github.actor }}" == "JamesonRGrieve" ]; then
            DISCORD_NAME="<@329145730725838858>"
          elif [ "${{ github.actor }}" == "waiscodes" ]; then
            DISCORD_NAME="<@670762167037067304>"
          elif [ "${{ github.actor }}" == "birdup000" ]; then
            DISCORD_NAME="<@856308374567256074>"
          elif [ "${{ github.actor }}" == "Nick-XT" ]; then
            DISCORD_NAME="<@381908912951001088>"
          else
            DISCORD_NAME="**${{ github.actor }}**"
          fi

          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          ESCAPED_MESSAGE="${COMMIT_MESSAGE//;/}"

          if [ "${{ env.strict_status }}" != "0" ]; then
            MESSAGE="❌ **TEST FAILURE**: **interactive-tests** on repository **${{ github.repository }}** branch **$BRANCH_NAME** commit '$ESCAPED_MESSAGE' (${{ github.sha }}) by ${DISCORD_NAME} "
          else
            MESSAGE="✅ Test passed: **interactive-tests** on repository **${{ github.repository }}** branch **$BRANCH_NAME** commit '$ESCAPED_MESSAGE' (${{ github.sha }}) by **${{ github.actor }}**"
          fi

          FILE_TO_SEND="tests/report.mp4"
          # If it doesn't exist, send the PDF
          if [ ! -f $FILE_TO_SEND ]; then
            FILE_TO_SEND="tests/FrontEnd.pdf"
          fi

          echo "Sending Video: $FILE_TO_SEND"
          curl -H "Content-Type:multipart/form-data" \
                -F "file=@$FILE_TO_SEND" \
                -F "content=$MESSAGE" \
                "${{ secrets.DISCORD_WEBHOOK }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: interactive-tests
          path: tests/FrontEnd.pdf

      - name: Exit with test status
        if: env.strict_status != '0'
        run: exit 1
