name: Sync Repository

on:
  push:
    branches:
      - main

jobs:
  sync-repos:
    runs-on: ubuntu-latest

    env:
      SOURCE_REPO: ${{ github.repository }}
      TARGET_REPO: ${{ secrets.SECRET_TARGET }}

    steps:
      - name: Verify Required Secrets
        run: |
          # Debug info (safe to display)
          echo "Current repository: ${{ github.repository }}"
          echo "GitHub actor: ${{ github.actor }}"
          # Verify secret format
          if [[ ! "${{ secrets.SECRET_TARGET }}" =~ ^[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+$ ]]; then
            echo "::error::SECRET_TARGET must be in the format 'owner/repo'"
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_TARGET }}" ]; then
            echo "::error::SECRET_TARGET is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_PAT }}" ]; then
            echo "::error::SECRET_PAT is not set"
            exit 1
          fi
          echo "Required secrets are present"
          # Safe logging of target repo (since it's not truly sensitive)
          echo "Target repository: ${{ secrets.SECRET_TARGET }}"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Check out source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Attempt Sync
        id: sync
        continue-on-error: true
        run: |
          # Add target remote using PAT
          echo "Adding target remote..."
          git remote add target "https://${{ secrets.SECRET_PAT }}@github.com/${{ secrets.SECRET_TARGET }}.git"

          # Fetch target repository
          echo "Fetching target repository..."
          git fetch target main

          # Attempt to merge
          echo "Attempting to merge changes..."
          if git merge target/main --no-edit; then
            echo "Merge successful"
            echo "merge_status=success" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected"
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            # Abort the merge to prepare for interactive branch
            git merge --abort
          fi

      - name: Push Direct Changes
        if: steps.sync.outputs.merge_status == 'success'
        run: |
          echo "Pushing changes to target repository..."
          git push target main
          echo "Successfully pushed changes to ${{ secrets.SECRET_TARGET }}"

      - name: Handle Merge Conflicts
        if: steps.sync.outputs.merge_status == 'conflict'
        run: |
          # Create and switch to interactive-merge branch
          echo "Creating interactive-merge branch..."
          git checkout -b interactive-merge

          # Try to merge again on the new branch
          git merge target/main || true

          # Push the conflict branch
          echo "Pushing interactive-merge branch..."
          git push target interactive-merge

      - name: Create Pull Request
        if: steps.sync.outputs.merge_status == 'conflict'
        env:
          GH_TOKEN: ${{ secrets.SECRET_PAT }}
        run: |
          # Extract owner and repo from SECRET_TARGET
          TARGET_OWNER=$(echo ${{ secrets.SECRET_TARGET }} | cut -d'/' -f1)
          TARGET_REPO=$(echo ${{ secrets.SECRET_TARGET }} | cut -d'/' -f2)

          echo "Creating pull request in $TARGET_OWNER/$TARGET_REPO..."
          gh pr create \
            --repo "$TARGET_OWNER/$TARGET_REPO" \
            --title "ðŸ”„ Sync Updates (Requires Resolution)" \
            --body "This PR was automatically created due to merge conflicts during the sync process. Please resolve the conflicts manually." \
            --base main \
            --head interactive-merge
