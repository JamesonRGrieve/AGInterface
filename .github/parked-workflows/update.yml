name: Sync Repository

on:
  push:
    branches:
      - main

jobs:
  sync-repos:
    runs-on: ubuntu-latest

    env:
      SOURCE_REPO: ${{ github.repository }}
      TARGET_REPO: ${{ secrets.SECRET_TARGET }}
      GH_TOKEN: ${{ secrets.SECRET_PAT }}

    steps:
      - name: Verify Required Secrets and Permissions
        run: |
          # Debug info (safe to display)
          echo "Current repository: ${{ github.repository }}"
          echo "Target repository: ${{ secrets.SECRET_TARGET }}"

          # Verify secret format
          if [[ ! "${{ secrets.SECRET_TARGET }}" =~ ^[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+$ ]]; then
            echo "::error::SECRET_TARGET must be in the format 'owner/repo'"
            exit 1
          fi

          # Test repository access using gh cli
          echo "Testing repository access..."
          if ! gh repo view "${{ secrets.SECRET_TARGET }}" &>/dev/null; then
            echo "::error::Cannot access target repository. Please check PAT permissions."
            exit 1
          fi

      - name: Check out source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Clone and Setup Target
        id: setup
        run: |
          # Create a temporary directory for target repo
          TEMP_DIR=$(mktemp -d)
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_OUTPUT

          # Clone target repository
          echo "Cloning target repository..."
          gh repo clone "${{ secrets.SECRET_TARGET }}" "$TEMP_DIR"

          # Setup target as remote
          cd ${{ github.workspace }}
          git remote add target "$TEMP_DIR"

      - name: Attempt Sync
        id: sync
        continue-on-error: true
        run: |
          # Fetch target repository
          echo "Fetching from target..."
          git fetch target main

          # Attempt to merge
          echo "Attempting to merge changes..."
          if git merge target/main --no-edit; then
            echo "Merge successful"
            echo "merge_status=success" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected"
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            git merge --abort
          fi

      - name: Push Direct Changes
        if: steps.sync.outputs.merge_status == 'success'
        run: |
          echo "Pushing changes to target repository..."
          cd ${{ steps.setup.outputs.TEMP_DIR }}
          git pull origin main
          cd ${{ github.workspace }}
          git push target HEAD:main
          echo "Successfully pushed changes"

      - name: Handle Merge Conflicts
        if: steps.sync.outputs.merge_status == 'conflict'
        run: |
          # Create and switch to interactive-merge branch
          echo "Creating interactive-merge branch..."
          git checkout -b interactive-merge

          # Try to merge again on the new branch
          git merge target/main || true

          # Stage all changes (including conflicts)
          git add .

          # Commit the changes with conflicts
          git commit -m "Sync with conflicts - needs manual resolution"

          # Push using gh cli instead of git
          echo "Pushing interactive-merge branch..."
          gh repo sync ${{ github.workspace }} --source HEAD:interactive-merge --dest ${{ secrets.SECRET_TARGET }}

      - name: Create Pull Request
        if: steps.sync.outputs.merge_status == 'conflict'
        run: |
          echo "Creating pull request..."
          gh pr create \
            --repo "${{ secrets.SECRET_TARGET }}" \
            --title "ðŸ”„ Sync Updates (Requires Resolution)" \
            --body "This PR was automatically created due to merge conflicts during the sync process. Please resolve the conflicts manually." \
            --base main \
            --head interactive-merge
